{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<script>\n",
       "code_show_err=false; \n",
       "function code_toggle_err() {\n",
       " if (code_show_err){\n",
       " $('div.output_stderr').hide();\n",
       " } else {\n",
       " $('div.output_stderr').show();\n",
       " }\n",
       " code_show_err = !code_show_err\n",
       "} \n",
       "$( document ).ready(code_toggle_err);\n",
       "</script>\n",
       "To toggle on/off output_stderr, click <a href=\"javascript:code_toggle_err()\">here</a>."
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "execution_count": 1209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Supress unnecessary warning messages\n",
    "\n",
    "from IPython.display import HTML\n",
    "HTML('''<script>\n",
    "code_show_err=false; \n",
    "function code_toggle_err() {\n",
    " if (code_show_err){\n",
    " $('div.output_stderr').hide();\n",
    " } else {\n",
    " $('div.output_stderr').show();\n",
    " }\n",
    " code_show_err = !code_show_err\n",
    "} \n",
    "$( document ).ready(code_toggle_err);\n",
    "</script>\n",
    "To toggle on/off output_stderr, click <a href=\"javascript:code_toggle_err()\">here</a>.''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1210,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from scipy.stats import skew, kurtosis\n",
    "from collections import Counter\n",
    "from copy import deepcopy\n",
    "from fancyimpute import MICE\n",
    "from datetime import datetime\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.neighbors import KNeighborsClassifier as KNN\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from imblearn.over_sampling import SMOTE\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1211,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('./data/raw/user_subset.pkl', 'rb') as picklefile:\n",
    "    user = pickle.load(picklefile)\n",
    "with open('./data/raw/session_subset.pkl', 'rb') as picklefile:\n",
    "    session = pickle.load(picklefile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1212,
   "metadata": {},
   "outputs": [],
   "source": [
    "def drop_rare_values(df, threshold):\n",
    "    df_obj = df.select_dtypes(include='object').iloc[:,1:]\n",
    "    for column in df_obj.columns:\n",
    "        levels = df[column].value_counts()/df.shape[0]\n",
    "        insig_index = np.sum([x > threshold for x in levels.tolist()])\n",
    "        for i in range(insig_index, levels.shape[0]):\n",
    "            value = levels.index.tolist()[i]\n",
    "            df[column].replace(value, 'catchall', inplace=True)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Format and split user data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1213,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Impute the missing action_type and action_details with mode values\n",
    "def impute_mode(df, col_key, col_na, mode_table=None):\n",
    "    \n",
    "    if (mode_table is None):\n",
    "        mode_series = df[~df[col_na].isna()].groupby(col_key)[col_na].agg(lambda x:x.value_counts().index[0])\n",
    "        mode_series = pd.DataFrame(mode_series.reset_index())\n",
    "        mode_table = mode_series\n",
    "    else:\n",
    "        mode_series = mode_table\n",
    "    merged_frame = pd.merge(df, mode_series, how='left', \n",
    "                             left_on=[col_key], \n",
    "                             right_on=[col_key]).set_index(df.index)\n",
    "    \n",
    "    merged_frame.rename(columns={col_na+'_x': col_na, col_na+'_y':'mode_value'}, inplace=True)\n",
    "    merged_frame[col_na].fillna(merged_frame.mode_value, inplace=True)\n",
    "    merged_frame.drop(['mode_value'], axis=1, inplace=True)\n",
    "    \n",
    "    return merged_frame, mode_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1214,
   "metadata": {},
   "outputs": [],
   "source": [
    "def date_transformation(user):\n",
    "    user['date_account_created'] = pd.to_datetime(user['date_account_created'], format='%Y-%m-%d')\n",
    "    user['timestamp_first_active'] = pd.to_datetime(user['timestamp_first_active']//10000, format='%Y%m%d%H')\n",
    "    user.drop('date_first_booking', axis=1, inplace=True)\n",
    "    #user['account_age'] = user['date_account_created'].apply(lambda x:(x.year-1970)*12+x.month)\n",
    "    user['create_year'] = user['date_account_created'].apply(lambda x:x.year)\n",
    "    user['create_month'] = user['date_account_created'].apply(lambda x:x.month)\n",
    "    \n",
    "    #user['active_age'] = user['timestamp_first_active'].apply(lambda x:(x.year-1970)*12+x.month)\n",
    "    user['active_year'] = user['timestamp_first_active'].apply(lambda x:x.year)\n",
    "    user['active_month'] = user['timestamp_first_active'].apply(lambda x:x.month)\n",
    "    user['active_hour'] = user['timestamp_first_active'].apply(lambda x:x.hour)\n",
    "    \n",
    "    user['signup_flow'] = user['signup_flow'].astype(int).astype('str')\n",
    "\n",
    "    y_user = pd.DataFrame(user['country_destination'].values, columns=['country_destination'], index=user.id)\n",
    "    X_user = user.drop(['country_destination'], axis=1)\n",
    "    X_user.set_index('id', inplace=True)\n",
    "    return X_user, y_user"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deal with wrong and missing values in user data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1215,
   "metadata": {},
   "outputs": [],
   "source": [
    "def impute_age(X_user_train, age_mode=None):\n",
    "    X_user_train.first_affiliate_tracked.fillna('catchall', inplace=True)\n",
    "    X_user_train.loc[((X_user_train['age'] <= 18) | (X_user_train['age'] >= 100)), 'age' ] = np.NAN\n",
    "    cols_to_drop = ['date_account_created', 'timestamp_first_active']\n",
    "    X_user_train.drop(cols_to_drop, axis=1, inplace=True)\n",
    "\n",
    "    # Imput data with median value\n",
    "    # median_age = X_user_train[~X_user_train['age'].isna()].age.median()\n",
    "    # X_user_train.loc[X_user_train['age'].isna(), 'age'] = median_age\n",
    "    \n",
    "    X_user_train, train_age_mode = impute_mode(X_user_train, 'first_device_type', 'age', age_mode)\n",
    "\n",
    "    return X_user_train, train_age_mode"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1216,
   "metadata": {},
   "outputs": [],
   "source": [
    "def custom_dummify(df, threshold, train_cols=None):\n",
    "    df_concat = pd.DataFrame()\n",
    "    df_noncat = df.select_dtypes(exclude='object')\n",
    "    # print(df_noncat.shape)\n",
    "    df = df.select_dtypes(include='object')\n",
    "    \n",
    "    all_cols = []\n",
    "        \n",
    "    for column in range(len(df.columns)):\n",
    "        col_name = df.columns[column]\n",
    "        levels = df.iloc[:,column].value_counts()\n",
    "        count_all = np.sum(levels)\n",
    "        significant_cols = []\n",
    "        for level_values in sorted(list(levels.index)):\n",
    "            if (levels[level_values]/count_all < threshold):\n",
    "                pass\n",
    "            else:\n",
    "                significant_cols.append(level_values)\n",
    "        df_dummy = pd.get_dummies(df[col_name], prefix=col_name)\n",
    "\n",
    "        cols_to_keep = [(col_name+\"_\"+x) for x in significant_cols]\n",
    "        if (train_cols != None):\n",
    "            for x in cols_to_keep:\n",
    "                if x not in train_cols:\n",
    "                    cols_to_keep.remove(x)\n",
    "        all_cols.extend(cols_to_keep)\n",
    "        df_dummy_kept = pd.DataFrame(df_dummy[cols_to_keep], columns=cols_to_keep)\n",
    "        df_dummy_agg = df_dummy.drop((cols_to_keep), axis=1)\n",
    "        df_dummy_agg = pd.DataFrame(df_dummy_agg.sum(axis=1), columns=[col_name+'_catch_all'])\n",
    "        df_unify = pd.concat([df_dummy_kept, df_dummy_agg], axis=1)\n",
    "        df_concat = pd.concat([df_concat, df_unify], axis=1)\n",
    "    # print(df_concat.shape)\n",
    "    return pd.concat([df_noncat, df_concat], axis=1 ), all_cols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1217,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/pandas/core/generic.py:4355: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._update_inplace(new_data)\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/pandas/core/indexing.py:537: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self.obj[item] = s\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/ipykernel_launcher.py:5: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  \"\"\"\n"
     ]
    }
   ],
   "source": [
    "X_user, y_user = date_transformation(user)\n",
    "user = drop_rare_values(user, 0.005)\n",
    "X_user_train, X_user_test, y_user_train, y_user_test = train_test_split(X_user, y_user, test_size = 0.25, random_state=1234, stratify=y_user)\n",
    "X_user_train, train_age_mode = impute_age(X_user_train)\n",
    "X_user_train, user_train_cols = custom_dummify(X_user_train, 0.005)\n",
    "X_user_train.drop('signup_flow_1', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deal with wrong and missing values in session data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1218,
   "metadata": {},
   "outputs": [],
   "source": [
    "def impute_session(session_train):\n",
    "    # Replace NaN in action column with others\n",
    "    session_train['action'].fillna(\"catch-all\", inplace=True)\n",
    "    # Clip the sessions longer than 24 hours to 24 hours\n",
    "    session_train.loc[session_train['secs_elapsed']>24*3600, 'secs_elapsed'] = 24*3600\n",
    "    return session_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1219,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_session_cat_stats(user_df, session_df):\n",
    "    session_stats = pd.DataFrame(index=user_df.index)\n",
    "    cat_cols = list(session_df.select_dtypes(include='object').columns)[1:]\n",
    "    \n",
    "    for col in cat_cols:\n",
    "        val_freq = Counter(session_df[col])\n",
    "        sig_val = sorted(list(val_freq.keys()))\n",
    "\n",
    "        for val in sig_val:\n",
    "            val_count = session_df.groupby(session_df.index).apply(lambda x, val=val, col=col: np.sum(x[col] == val))\n",
    "            tmp = pd.DataFrame(val_count.values, columns=[col+'['+val+']'], index=val_count.index)\n",
    "            session_stats = pd.merge(session_stats, tmp, how='left', left_index=True, right_index=True )\n",
    "    return session_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1220,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/pandas/core/generic.py:4355: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self._update_inplace(new_data)\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/pandas/core/indexing.py:537: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-view-versus-copy\n",
      "  self.obj[item] = s\n"
     ]
    }
   ],
   "source": [
    "session = drop_rare_values(session, 0.005)\n",
    "\n",
    "session.set_index('user_id', drop=False, inplace=True)\n",
    "train_index = list(X_user_train.index)\n",
    "session_train = session[session['user_id'].isin(train_index)]\n",
    "test_index = list(X_user_test.index)\n",
    "session_test = session[session['user_id'].isin(test_index)]\n",
    "\n",
    "session_train = impute_session(session_train)\n",
    "session_test = impute_session(session_test)\n",
    "session_train, action_type_mode = impute_mode(session_train, 'action', 'action_type')\n",
    "session_train, action_detail_mode = impute_mode(session_train, 'action', 'action_detail')\n",
    "session_train, action_secs_mode = impute_mode(session_train, 'action', 'secs_elapsed')\n",
    "session_train.fillna(\"catch-all\", inplace=True)\n",
    "session_stats = get_session_cat_stats(X_user_train, session_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1221,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('./data/processed/session_stats.pkl', 'wb') as picklefile:\n",
    "    pickle.dump(session_stats, picklefile)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Combine session and user data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1222,
   "metadata": {},
   "outputs": [],
   "source": [
    "def quantile_range(x):\n",
    "    return x.quantile(0.75)-x.quantile(0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1223,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_session_continous_stats(user_df, session_df):\n",
    "    session_sec_stats = session_df.groupby('user_id')['secs_elapsed'].agg([np.median, np.mean, np.std, skew, kurtosis, quantile_range])\n",
    "    session_sec_stats.rename(columns={'median':'sess[median]', 'mean':'sess[mean]', 'std':'sess[std]', 'skew':'sess[skew]', 'kurtosis':'sess[kurtosis]', 'quan_range':'sess[quan_range]'}, inplace=True)\n",
    "    user_df = user_df.merge(session_sec_stats, how='left', left_index=True, right_index=True)\n",
    "    return user_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1224,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/ipykernel_launcher.py:2: FutureWarning: 'user_id' is both a column name and an index level.\n",
      "Defaulting to column but this will raise an ambiguity error in a future version\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "X_user_train_1 = deepcopy(X_user_train)\n",
    "X_user_train_1 = X_user_train_1.merge(session_stats, how='left', left_index=True, right_index=True)\n",
    "X_user_train_1 = get_session_continous_stats(X_user_train_1, session_train)\n",
    "X_user_train_1.fillna(0.0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build a baseline model for NDF and Booking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1225,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_bin = deepcopy(y_user_train)\n",
    "y_bin['booking'] = 1 - (y_bin['country_destination'] == 'NDF').astype('int')\n",
    "y_bin.drop(['country_destination'], axis=1, inplace=True)\n",
    "y_train=y_bin"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x16ffb11d0>"
      ]
     },
     "execution_count": 1226,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x15fd427f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_train['booking'].value_counts().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1227,
   "metadata": {},
   "outputs": [],
   "source": [
    "ssX = StandardScaler()\n",
    "X_train_imputed_scaled = ssX.fit_transform(X_user_train_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1261,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logistic: best score: 0.6760994502748626\n"
     ]
    }
   ],
   "source": [
    "models = [\n",
    "          ('logistic', LogisticRegression),\n",
    "          #('tree', DecisionTreeClassifier),\n",
    "          #('forest', RandomForestClassifier),\n",
    "          #('xgboost', XGBClassifier)\n",
    "         ]\n",
    "\n",
    "param_choices = [    \n",
    "    {\n",
    "        'C': np.logspace(-3, 6, 12),\n",
    "        'penalty': ['l1', 'l2']\n",
    "    },\n",
    "    \"\"\"\n",
    "    {\n",
    "        'max_depth': [1,2,3,4,5],\n",
    "        'min_samples_leaf': [1,3,5]\n",
    "    },\n",
    "\n",
    "    {\n",
    "        'criterion':['gini','entropy'],\n",
    "        'n_estimators': [40,50,60],\n",
    "        'min_samples_leaf':[1,3],\n",
    "        'min_samples_split':[2,5]\n",
    "    },    \n",
    "\n",
    "    {\n",
    "        'max_depth': [5,6,7],\n",
    "        'learning_rate': np.logspace(-2,0,5),\n",
    "        'n_estimators': [80,90,85,95],\n",
    "        'objective':['binary:logistic']\n",
    "    }\"\"\"\n",
    "]\n",
    "\n",
    "y_train.values.reshape(-1,)\n",
    "grids = {}\n",
    "for model_info, params in zip(models, param_choices[:1]):\n",
    "    name, model = model_info\n",
    "    grid = GridSearchCV(model(), params, scoring='accuracy', cv=5, n_jobs=-1)\n",
    "    grid.fit(X_train_imputed_scaled, y_train.values.reshape(-1,))\n",
    "    s = \"{}: best score: {}\".format(name, grid.best_score_)\n",
    "    print(s)\n",
    "    grids[name] = grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6760994502748626\n",
      "{'penalty': 'l1', 'C': 0.2848035868435802}\n"
     ]
    }
   ],
   "source": [
    "#print (grids['forest'].best_score_)\n",
    "print (grids['logistic'].best_score_)\n",
    "print (grids['logistic'].best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "logistic:\n",
    "0.6685407296351824\n",
    "{'penalty': 'l1', 'C': 1.873817422860385}\n",
    "\n",
    "**Result-Accuracy**<br>\n",
    "knn: best score: 0.6414292853573214 <br>\n",
    "logistic: best score: 0.6689780109945027 <br>\n",
    "tree: best score: 0.698088455772114 <br>\n",
    "forest: best score: 0.6454897551224388 <br>\n",
    "\n",
    "**Result-AUC**<br>\n",
    "knn: best score: 0.6797561404771426<br>\n",
    "logistic: best score: 0.7137787331059189<br>\n",
    "tree: best score: 0.7405620278725061<br>\n",
    "forest: best score: 0.731510519720228<br>\n",
    "\n",
    "\n",
    "**Result-AUC**<br>\n",
    "knn: best score: 0.659525884390658<br>\n",
    "logistic: best score: 0.7141040998794065<br>\n",
    "tree: best score: 0.722326283870917<br>\n",
    "forest: best score: 0.7526480939542807<br>\n",
    "{'criterion': 'gini',<br>\n",
    " 'min_samples_leaf': 3,<br>\n",
    " 'min_samples_split': 7,<br>\n",
    " 'n_estimators': 100}<br>\n",
    "xgboost: best score: 0.7654377067200799<br>\n",
    "{'learning_rate': 0.1778279410038923,<br>\n",
    " 'max_depth': 5,<br>\n",
    " 'n_estimators': 80,<br>\n",
    " 'objective': 'binary:logistic'}<br>\n",
    " \n",
    " models = [('knn', KNN), \n",
    "          ('logistic', LogisticRegression),\n",
    "          ('tree', DecisionTreeClassifier),\n",
    "          ('forest', RandomForestClassifier),\n",
    "          ('xgboost', XGBClassifier),\n",
    "          ('svc', SVC )\n",
    "         ]\n",
    "\n",
    "param_choices = [\n",
    "    {\n",
    "        'n_neighbors': range(3, 9, 2)\n",
    "    },\n",
    "    {\n",
    "        'C': np.logspace(-3,6, 12),\n",
    "        'penalty': ['l1', 'l2']\n",
    "    },\n",
    "    {\n",
    "        'max_depth': [1,2,3,4,5],\n",
    "        'min_samples_leaf': [1,3,5]\n",
    "    },\n",
    "    {\n",
    "        'criterion':['gini','entropy'],\n",
    "        'n_estimators': [10, 20, 50, 100],\n",
    "        'min_samples_leaf':[1,3,5],\n",
    "        'min_samples_split':[2,5,7]\n",
    "    },\n",
    "    {\n",
    "        'max_depth': [3,5,7,9],\n",
    "        'learning_rate': np.logspace(-3,0,5),\n",
    "        'n_estimators': [10,50,80,100],\n",
    "        'objective':['binary:logistic']\n",
    "    },\n",
    "    {\n",
    "        'kernal': ['poly', 'rbf'],\n",
    "        'degree': np.linspace(2, 8, 7), \n",
    "        'C': np.linspace(0.1, 10, 5)\n",
    "    }\n",
    "]\n",
    "\n",
    "only values >1% <br>\n",
    "logistic: best score: 0.6645427286356822<br>\n",
    "tree: best score: 0.6787856071964018<br>\n",
    "forest: best score: 0.6893428285857072<br>\n",
    "xgboost: best score: 0.6954647676161919<br>\n",
    "{'learning_rate': 0.03162277660168379, <br>\n",
    " 'max_depth': 5, <br>\n",
    " 'n_estimators': 100, <br>\n",
    " 'objective': 'binary:logistic'} <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 0.2848035868435802, 'penalty': 'l1'}"
      ]
     },
     "execution_count": 1230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "grids['logistic'].best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1231,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_pred = grids['logistic'].predict(X_train_imputed_scaled)\n",
    "y_train_pred_soft = grids['logistic'].predict_proba(X_train_imputed_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1232,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Helper function for printing confusion matrices (see: https://gist.github.com/shaypal5/94c53d765083101efc0240d776a23823)\n",
    "def print_confusion_matrix(confusion_matrix, class_names, figsize = (10,7), fontsize=18):\n",
    "    \"\"\"Prints a confusion matrix, as returned by sklearn.metrics.confusion_matrix, as a heatmap.\n",
    "    \n",
    "    Arguments\n",
    "    ---------\n",
    "    confusion_matrix: numpy.ndarray\n",
    "        The numpy.ndarray object returned from a call to sklearn.metrics.confusion_matrix. \n",
    "        Similarly constructed ndarrays can also be used.\n",
    "    class_names: list\n",
    "        An ordered list of class names, in the order they index the given confusion matrix.\n",
    "    figsize: tuple\n",
    "        A 2-long tuple, the first value determining the horizontal size of the ouputted figure,\n",
    "        the second determining the vertical size. Defaults to (10,7).\n",
    "    fontsize: int\n",
    "        Font size for axes labels. Defaults to 14.\n",
    "        \n",
    "    Returns\n",
    "    -------\n",
    "    matplotlib.figure.Figure\n",
    "        The resulting confusion matrix figure\n",
    "    \"\"\"\n",
    "    df_cm = pd.DataFrame(\n",
    "        confusion_matrix, index=class_names, columns=class_names, \n",
    "    )\n",
    "    fig = plt.figure(figsize=figsize)\n",
    "    try:\n",
    "        heatmap = sns.heatmap(df_cm, annot=True, fmt=\"d\")\n",
    "    except ValueError:\n",
    "        raise ValueError(\"Confusion matrix values must be integers.\")\n",
    "    heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=fontsize)\n",
    "    heatmap.xaxis.set_ticklabels(heatmap.xaxis.get_ticklabels(), rotation=45, ha='right', fontsize=fontsize)\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    return fig"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1233,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x14e5ae6d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = confusion_matrix(y_true=y_train, y_pred=y_train_pred)\n",
    "cm = print_confusion_matrix(conf_mat, ['Class 0', 'Class 1'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build a model for US/Non-USA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1263,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_us = deepcopy(y_user_train)\n",
    "y_us['booking'] = 1 - (y_us['country_destination'] == 'US').astype('int')\n",
    "y_us.drop(['country_destination'], axis=1, inplace=True)\n",
    "y_train=y_us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x12f865160>"
      ]
     },
     "execution_count": 1264,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x160ea35c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_train['booking'].value_counts().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1265,
   "metadata": {},
   "outputs": [],
   "source": [
    "ssX2 = StandardScaler()\n",
    "X_train_imputed_scaled2 = ssX2.fit_transform(X_user_train_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1268,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logistic: best score: 0.7113318340829585\n"
     ]
    }
   ],
   "source": [
    "models = [\n",
    "          ('logistic', LogisticRegression),\n",
    "          #('tree', DecisionTreeClassifier),\n",
    "          #('forest', RandomForestClassifier),\n",
    "          ('xgboost', XGBClassifier)\n",
    "         ]\n",
    "\n",
    "param_choices = [    \n",
    "    {\n",
    "        'C': np.logspace(-3, 6, 6),\n",
    "        'penalty': ['l1', 'l2']\n",
    "    },\n",
    "    \"\"\"\n",
    "    {\n",
    "        'max_depth': [1,2,3,4,5],\n",
    "        'min_samples_leaf': [1,3,5]\n",
    "    },\n",
    "    {\n",
    "        'criterion':['gini','entropy'],\n",
    "        'n_estimators': [40,50,60],\n",
    "        'min_samples_leaf':[1,3],\n",
    "        'min_samples_split':[2,5]\n",
    "    },    \n",
    "    \"\"\"\n",
    "    {\n",
    "        'max_depth': [5,6,7],\n",
    "        'n_estimators': [50,100,200],\n",
    "        'objective':['binary:logistic']\n",
    "    },\n",
    "]\n",
    "\n",
    "\n",
    "grids2 = {}\n",
    "for model_info, params in zip(models, param_choices[:1]):\n",
    "    name, model = model_info\n",
    "    grid = GridSearchCV(model(), params, scoring='accuracy', cv=5, n_jobs=-1)\n",
    "    grid.fit(X_train_imputed_scaled2, y_train.values.reshape(-1,))\n",
    "    s = \"{}: best score: {}\".format(name, grid.best_score_)\n",
    "    print(s)\n",
    "    grids2[name] = grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1269,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7113318340829585\n",
      "{'C': 0.06309573444801933, 'penalty': 'l1'}\n"
     ]
    }
   ],
   "source": [
    "#print (grids['forest'].best_score_)\n",
    "print (grids2['logistic'].best_score_)\n",
    "print (grids2['logistic'].best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "0.7113318340829585\n",
    "{'C': 0.06309573444801933, 'penalty': 'l1'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1270,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_train_pred2 = grids2['logistic'].predict(X_train_imputed_scaled)\n",
    "y_train_pred2_soft = grids2['logistic'].predict_proba(X_train_imputed_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x138ac7908>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = confusion_matrix(y_true=y_train, y_pred=y_train_pred2)\n",
    "cm = print_confusion_matrix(conf_mat, ['Class 0', 'Class 1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1275,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.34972702, 0.3910912 , 0.48547088, ..., 0.23034805, 0.19359283,\n",
       "       0.37923952])"
      ]
     },
     "execution_count": 1275,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred2_soft[:,0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Oversampling and predicting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1290,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_2nd = np.append(X_train_imputed_scaled, y_train_pred_soft[:,0].reshape(-1,1), axis=1)\n",
    "X_train_2nd = np.append(X_train_2nd, y_train_pred2_soft[:,0].reshape(-1,1), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1294,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train_2nd = pd.DataFrame(X_train_2nd, columns = X_user_train_1.columns.tolist()+['NDF_pred', 'US_pred'], index=X_user_train_1.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1295,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/utils/validation.py:578: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "rus = SMOTE()\n",
    "X_train_smote, y_train_smote = rus.fit_sample(X_train_2nd, y_user_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1310,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n",
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "xgboost: best score: 0.8152477695367086\n"
     ]
    }
   ],
   "source": [
    "models = [\n",
    "          #('logistic', LogisticRegression),\n",
    "          #('tree', DecisionTreeClassifier),\n",
    "          #('forest', RandomForestClassifier),\n",
    "          ('xgboost', XGBClassifier)\n",
    "         ]\n",
    "\n",
    "param_choices = [    \n",
    "    \n",
    "    {\n",
    "        'C': np.logspace(-3, 6, 6),\n",
    "        'penalty': ['l1', 'l2']\n",
    "    },\n",
    "    \"\"\"\n",
    "    {\n",
    "        'max_depth': [1,2,3,4,5],\n",
    "        'min_samples_leaf': [1,3,5]\n",
    "    },\n",
    "    {\n",
    "        'criterion':['gini','entropy'],\n",
    "        'n_estimators': [40,50,60],\n",
    "        'min_samples_leaf':[1,3],\n",
    "        'min_samples_split':[2,5]\n",
    "    },    \n",
    "    \"\"\"\n",
    "    {\n",
    "        'max_depth': [3,4,5],\n",
    "        'n_estimators': [1, 150,200,250],\n",
    "        'objective':['binary:logistic']\n",
    "    }\n",
    "\n",
    "]\n",
    "\n",
    "\n",
    "grids3 = {}\n",
    "for model_info, params in zip(models, param_choices[:1]):\n",
    "    name, model = model_info\n",
    "    grid = RandomizedSearchCV(model(), params, scoring='accuracy', cv=3, n_jobs=-1)\n",
    "    grid.fit(X_train_smote, y_train_smote.reshape(-1,))\n",
    "    s = \"{}: best score: {}\".format(name, grid.best_score_)\n",
    "    print(s)\n",
    "    grids3[name] = grid"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1315,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 0.7148925537231384\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    }
   ],
   "source": [
    "print ('Accuracy score is', grids3['xgboost'].score(np.array(X_train_2nd), y_user_train))\n",
    "y_train_down_pred3 = grids3['xgboost'].predict(np.array(X_train_2nd))\n",
    "y_train_down_pred3_soft = grids3['xgboost'].predict_proba(np.array(X_train_2nd))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1316,
   "metadata": {},
   "outputs": [],
   "source": [
    "model3 = grids3['xgboost']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "model3.best_params_\n",
    "{'max_depth': 5, 'n_estimators': 250, 'objective': 'binary:logistic'}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1235,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "       colsample_bytree=0.5, gamma=0, learning_rate=0.03162277660168379,\n",
       "       max_delta_step=0, max_depth=5, min_child_weight=5, missing=None,\n",
       "       n_estimators=200, n_jobs=1, nthread=None,\n",
       "       objective='multi:softprob', random_state=0, reg_alpha=0,\n",
       "       reg_lambda=1, scale_pos_weight=1, seed=None, silent=True,\n",
       "       subsample=0.9)"
      ]
     },
     "execution_count": 1235,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgb3 = XGBClassifier( max_depth=5, learning_rate=0.03162277660168379,\n",
    "    n_estimators=200, objective='multi:softprob',\n",
    "    subsample=0.9, colsample_bytree=0.5, min_child_weight=5)\n",
    "xgb3.fit(X_train_smote, y_train_smote)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1319,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('./data/model/2pred_xgboost.pkl', 'wb') as picklefile:\n",
    "    pickle.dump(grids3['xgboost'], picklefile)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1237,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 0.6212518740629686\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    }
   ],
   "source": [
    "print ('Accuracy score is', xgb3.score(X_train_2nd, y_user_train))\n",
    "y_train_down_pred3 = xgb3.predict(X_train_2nd)\n",
    "y_train_down_pred3_soft = xgb3.predict_proba(X_train_2nd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1238,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x16ff175c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = confusion_matrix(y_true=y_user_train, y_pred=y_train_down_pred3)\n",
    "cm = print_confusion_matrix(conf_mat, sorted(y_user_train['country_destination'].unique().tolist()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1239,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_score(pred, real):\n",
    "\n",
    "    cols = pred.columns\n",
    "    ref = np.argsort(pred, axis=1)\n",
    "    result = []\n",
    "    score = 0\n",
    "    for row in range(pred.shape[0]):\n",
    "        final = [cols[i] for i in ref.iloc[row,:]][-1:-6:-1]\n",
    "        result.append(final)\n",
    "        match = [int(x == real.iloc[row,0]) for x in final]\n",
    "        sum=0\n",
    "        for i in range(5):\n",
    "            sum += (2**match[i]-1)/np.log2(i+1+1)\n",
    "        #print (\"real:\", real.iloc[row,0], \"predicted:\", final, \"score:\", sum  )\n",
    "        score += sum\n",
    "        \n",
    "    return result, score/len(pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1240,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred = pd.DataFrame(y_train_down_pred3_soft, columns=sorted(y_user_train['country_destination'].unique().tolist()))\n",
    "train_result, train_score = get_score(pred, y_user_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1241,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8189182180860449\n"
     ]
    }
   ],
   "source": [
    "print (train_score)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Build last model with only 2014 and newer data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Check test performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1320,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'first_affiliate_tracked'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1320-0f6972f140c8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_user_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimpute_age\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_user_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_age_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mX_user_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcustom_dummify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_user_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.005\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0muser_train_cols\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-1215-8a26edfe4288>\u001b[0m in \u001b[0;36mimpute_age\u001b[0;34m(X_user_train, age_mode)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mimpute_age\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_user_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mage_mode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0mX_user_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfirst_affiliate_tracked\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfillna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'catchall'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mX_user_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_user_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'age'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m18\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mX_user_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'age'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'age'\u001b[0m \u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNAN\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mcols_to_drop\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'date_account_created'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'timestamp_first_active'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mX_user_train\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcols_to_drop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda2/envs/Python35/lib/python3.5/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   3612\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3613\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3614\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3615\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3616\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'first_affiliate_tracked'"
     ]
    }
   ],
   "source": [
    "X_user_test, _ = impute_age(X_user_test, train_age_mode)\n",
    "X_user_test, _ = custom_dummify(X_user_test, 0.005, user_train_cols)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1243,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 1243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = (X_user_test.columns != X_user_train.columns)\n",
    "X_user_train.columns[index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1244,
   "metadata": {},
   "outputs": [],
   "source": [
    "session_test, _ = impute_mode(session_test, 'action', 'action_type', action_type_mode)\n",
    "session_test, _ = impute_mode(session_test, 'action', 'action_detail', action_detail_mode)\n",
    "session_test, _ = impute_mode(session_test, 'action', 'secs_elapsed', action_secs_mode)\n",
    "session_test.fillna(\"catch-all\", inplace=True)\n",
    "session_stats_test = get_session_cat_stats(X_user_test, session_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1245,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/ipykernel_launcher.py:2: FutureWarning: 'user_id' is both a column name and an index level.\n",
      "Defaulting to column but this will raise an ambiguity error in a future version\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "X_user_test_1 = deepcopy(X_user_test)\n",
    "X_user_test_1 = X_user_test_1.merge(session_stats_test, how='left', left_index=True, right_index=True)\n",
    "X_user_test_1 = get_session_continous_stats(X_user_test_1, session_test)\n",
    "X_user_test_1.fillna(0.0, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1246,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 1246,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index = (X_user_test_1.columns != X_user_train_1.columns)\n",
    "X_user_test_1.columns[index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 1247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_user_train_1.columns[index]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1248,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x160cc9d68>"
      ]
     },
     "execution_count": 1248,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x160cc9630>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_bin_test = deepcopy(y_user_test)\n",
    "y_bin_test['booking'] = 1 - (y_bin_test['country_destination'] == 'NDF').astype('int')\n",
    "y_bin_test.drop(['country_destination'], axis=1, inplace=True)\n",
    "y_test=y_bin_test\n",
    "y_test['booking'].value_counts().plot('bar')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1249,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_imputed_scaled = ssX.transform(X_user_test_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1321,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6662919243020423"
      ]
     },
     "execution_count": 1321,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred = grids['logistic'].predict(X_test_imputed_scaled)\n",
    "y_test_pred_soft = grids['logistic'].predict_proba(X_test_imputed_scaled)\n",
    "grids['logistic'].score(X_test_imputed_scaled, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1322,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x17bd1d1d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = confusion_matrix(y_true=y_test, y_pred=y_test_pred)\n",
    "cm = print_confusion_matrix(conf_mat, ['Class 0', 'Class 1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_us_test = deepcopy(y_user_test)\n",
    "y_us_test['booking'] = 1 - (y_us_test['country_destination'] == 'US').astype('int')\n",
    "y_us_test.drop(['country_destination'], axis=1, inplace=True)\n",
    "y_train=y_us"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1324,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.388982574480045"
      ]
     },
     "execution_count": 1324,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred2 = grids2['logistic'].predict(X_test_imputed_scaled)\n",
    "y_test_pred2_soft = grids2['logistic'].predict_proba(X_test_imputed_scaled)\n",
    "grids2['logistic'].score(X_test_imputed_scaled, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1252,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_2nd = np.append(X_test_stage2, y_test_pred_soft[:,0].reshape(-1,1), axis=1)\n",
    "X_test_2nd = np.append(X_test_2nd, y_test_pred2_soft[:,0].reshape(-1,1), axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 1253,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 0.6212518740629686\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    }
   ],
   "source": [
    "print ('Accuracy score is', xgb3.score(X_train_2nd, y_user_train))\n",
    "y_train_down_pred3 = xgb3.predict(X_train_2nd)\n",
    "y_train_down_pred3_soft = xgb3.predict_proba(X_train_2nd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1254,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16008, 146)\n",
      "(5337, 146)\n"
     ]
    }
   ],
   "source": [
    "print (X_train_2nd.shape)\n",
    "print (X_test_2nd.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1255,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score is 0.5727937043282744\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/songlin/anaconda2/envs/Python35/lib/python3.5/site-packages/sklearn/preprocessing/label.py:151: DeprecationWarning: The truth value of an empty array is ambiguous. Returning False, but in future this will result in an error. Use `array.size > 0` to check that an array is not empty.\n",
      "  if diff:\n"
     ]
    }
   ],
   "source": [
    "print ('Accuracy score is', xgb3.score(X_test_2nd, y_user_test))\n",
    "y_test_pred3 = xgb3.predict(X_test_2nd)\n",
    "y_test_pred3_soft = xgb3.predict_proba(X_test_2nd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1256,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x160cc7550>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "conf_mat = confusion_matrix(y_true=y_user_test, y_pred=y_test_pred3)\n",
    "cm = print_confusion_matrix(conf_mat, sorted(y_user_test['country_destination'].unique().tolist()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1257,
   "metadata": {},
   "outputs": [],
   "source": [
    "pred_test = pd.DataFrame(y_test_pred3_soft, columns=sorted(y_user_train['country_destination'].unique().tolist()))\n",
    "result, score_test = get_score(pred_test, y_user_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1258,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7702850680977926\n"
     ]
    }
   ],
   "source": [
    "print (score_test)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
